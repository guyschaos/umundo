package umundo;

import "um_message.proto";

option java_package = "org.umundo.msg";
option java_outer_classname = "UMTypedMessageProtos";

/*! {\brief {Defines the format of typed messages in umundo.}} 
    
    This proto defines the the format of typed messages in uMundo. Typed
    messages are containers, that carry the binary data of another user
    defined message along with a string specifying the type of that message.
    This message defines an extension to {\p UM_message} and uses the
    tag number {\code tag = 15 \endcode}. Therefore this number is marked as
    reserved and other extension can start at tag number 16.

    {\note Note that using the convenient {\p UM_typed_message} comes at a cost:
    the on wire size of the message becomes bloated by the type identifier. In
    case of performance critical applications, the denser {\p UM_message} or a
    binary payload should be used}

    In order to limit the problem of bloated size, the {\p UM_typed_message}
    contains both: a string identifier for the type name and an unsigned integer
    (32Bit) identifier for the type index. Both are marked as optional, what 
    should be read 

    {@author	Felix Heinrichs <felix.heinrichs@cs.tu-darmstadt.de>}
*/

message UMTypedMessage {

    extend umundo.UMMessage {
        optional UMTypedMessage typedMessage = 16;
    }

    optional uint32 typeIndex = 1;
    optional string typeName = 2;
    required bytes payload = 3;

    extensions 16 to max;
}
