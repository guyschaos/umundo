if ("$ENV{CTEST_SUBMIT_TYPE}" STREQUAL "")
        set(CTEST_SUBMIT_TYPE "Experimental")
else()
        set(CTEST_SUBMIT_TYPE $ENV{CTEST_SUBMIT_TYPE})
endif()

if ("$ENV{UMUNDO_SOURCE_DIR}" STREQUAL "")
	message(FATAL_ERROR "ENV{UMUNDO_SOURCE_DIR} is emtpy")
endif()

set(CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE 1048576)
set(CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE 1048576)
set(CTEST_SOURCE_DIRECTORY $ENV{UMUNDO_SOURCE_DIR})
set(CTEST_BINARY_DIRECTORY "/tmp/build-${CTEST_SUBMIT_TYPE}-${CTEST_SCRIPT_NAME}")
set(CTEST_SITE "umundo.tk.informatik.tu-darmstadt.de")

#######################################################################

#set(WITH_COVERAGE TRUE)
#find_program(CTEST_COVERAGE_COMMAND NAMES gcov)

#set(WITH_MEMCHECK TRUE)
#find_program(CTEST_MEMORYCHECK_COMMAND NAMES valgrind)
#set(CTEST_MEMORYCHECK_SUPPRESSIONS_FILE ${CTEST_SOURCE_DIRECTORY}/tests/valgrind.supp)

find_program(CTEST_GIT_COMMAND NAMES git)
if(NOT EXISTS "${CTEST_SOURCE_DIRECTORY}")
  set(CTEST_CHECKOUT_COMMAND "${CTEST_GIT_COMMAND} clone git://github.com/tklab-tud/umundo.git ${CTEST_SOURCE_DIRECTORY}")
endif()

set(CTEST_UPDATE_COMMAND "${CTEST_GIT_COMMAND}")

set(CTEST_CONFIGURE_COMMAND "${CMAKE_COMMAND} -LA -DCMAKE_BUILD_TYPE:STRING=${CTEST_BUILD_CONFIGURATION}")
set(CTEST_CONFIGURE_COMMAND "${CTEST_CONFIGURE_COMMAND} ${CTEST_BUILD_OPTIONS}")
set(CTEST_CONFIGURE_COMMAND "${CTEST_CONFIGURE_COMMAND} \"-G${CTEST_CMAKE_GENERATOR}\"")
set(CTEST_CONFIGURE_COMMAND "${CTEST_CONFIGURE_COMMAND} \"${CTEST_SOURCE_DIRECTORY}\"")

if("${CTEST_SUBMIT_TYPE}" STREQUAL "Continuous")
#	while (${CTEST_ELAPSED_TIME} LESS 36000)
#		set (START_TIME ${CTEST_ELAPSED_TIME})
#		ctest_start(Continuous)
#		ctest_update()
#		ctest_configure()
#		ctest_build()
#		ctest_test()
#		ctest_submit()
#		ctest_sleep( ${START_TIME} 300 ${CTEST_ELAPSED_TIME})
#	endwhile()
#
else()
endif()

ctest_empty_binary_directory(${CTEST_BINARY_DIRECTORY})
ctest_start(${CTEST_SUBMIT_TYPE})
ctest_update()
ctest_configure()
ctest_build()
ctest_test()

if (WITH_MEMCHECK AND CTEST_COVERAGE_COMMAND)
  ctest_coverage()
endif (WITH_MEMCHECK AND CTEST_COVERAGE_COMMAND)
if (WITH_MEMCHECK AND CTEST_MEMORYCHECK_COMMAND)
  ctest_memcheck()
endif (WITH_MEMCHECK AND CTEST_MEMORYCHECK_COMMAND)
ctest_submit()
