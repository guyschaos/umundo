package umundo;

option java_package = "org.umundo.s11n";
option java_outer_classname = "PBMessageProtos";

/*! {\brief {Defines the format of messages in umundo.}} 
    
    This proto defines the the format of messages in PBundo. It contains
    standard messages for strings, booleans, int (signed int32), longs, floats and
    doubles. You can think of these messages as arbitrarily sized arrays (or lists)
    of the specific type. Plus there is a general message {\p PB_message}, that
    consists of all of these messages as optional parts. PBundo messages are sent
    around using these {\p PB_messages}. For example, if a string should be sent
    around, you would create a {\p PB_string_message} and place it inside the {\p
    PB_message} that goes on the wire.

    Protobuf cannot distinguish between different message types by relying purely 
    on their binary representation. Therefore, only messages of the type {\p
    PB_message} are used in PBundo. Supplying user messages then would require
    using the magic nPBber indicating a binary message. However, to avoid this 
    problem, the extensions construct in protobuf is used in {\p PB_message}. This
    means, that custom messages can define an extension to {\p PB_message},
    specifying additional components. {\p PB_message} allows the tag range 
    {\code 16 to max\endcode} for user extensions.

    If a message transporting a custom message of a certain type is needed, this 
    can be achieved using the nested extension pattern described 
    {\link 
    http://code.google.com/intl/de-DE/apis/protocolbuffers/docs/proto.html#extensions
    here \endlink}. A generic way to achieve this is to use the {\p
    PB_typed_message}. This special message carries an embedded message and a
    string component describing the type of that message.
    
    {\note Note that using the convenient {\p PB_typed_message} comes at a cost:
    the on wire size of the message becomes bloated by the type identifier. In
    case of performance critical applications, the denser {\p PB_message} or a
    binary payload should be used}

    In order to generate the sources to use this description, you hava to invoke
    {\p protoc} with appropriate parameters for the target source. See the 
    protobuf description for details: {\link http://code.google.com/p/protobuf/}.

    {@author	Felix Heinrichs <felix.heinrichs@cs.tu-darmstadt.de>}
*/

message PBStringMessage {
    repeated string payload = 1;
}

message PBIntMessage {
    repeated int32 payload = 1;
}

message PBLongMessage {
    repeated int64 payload = 1;
}

message PBBoolMessage {
    repeated bool payload = 1;
}

message PBFloatMessage {
    repeated float payload = 1;
}

message PBDoubleMessage {
    repeated double payload = 1;
}

message PBTypedMessage {
    optional PBStringMessage stringPayload = 1;
    optional PBIntMessage intPayload = 2;
    optional PBLongMessage longPayload = 3;
    optional PBBoolMessage boolPayload = 4;
    optional PBFloatMessage floatPayload = 5;
    optional PBDoubleMessage doublePayload = 6;

    extensions 15 to max;
}
